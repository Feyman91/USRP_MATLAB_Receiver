clear;
close all;

radio = comm.SDRuReceiver(...
    'Platform',             'X310', ...
    'IPAddress',            '192.168.40.2', ...
    'ChannelMapping',       1, ...
    'MasterClockRate',      184.32e6, ...
    'CenterFrequency',      2.31e9, ...
    'Gain',                 15, ...
    'DecimationFactor',     6, ...
    'OutputDataType',       'double', ...
    'LocalOscillatorOffset',-35e6);
% tx = comm.SDRuTransmitter(...
%         'Platform',             'X310', ...
%         'IPAddress',            '192.168.40.2', ...
%         'ChannelMapping',       1, ...
%         'MasterClockRate',      184.32e6, ...
%         'CenterFrequency',      2.31e9, ...
%         'Gain',                 30, ...
%         'InterpolationFactor',  6);
% 参数设置
numSubcarriers = 1024;          % OFDM 子载波数
fftLength = 1024;  % FFT 长度
qamOrder = 4096;               % QAM 调制阶数
numSymbols = 30000;            % 每次传输的符号数量

% QAM 调制
dataBits = randi([0 1], numSymbols * log2(qamOrder), 1); % 随机生成比特流
qamModulatedSymbols = qammod(dataBits, qamOrder, 'InputType', 'bit', 'UnitAveragePower', true);

% 调整 QAM 调制后的符号为 OFDM 所需的形状
% 每个 OFDM 符号需要填满所有子载波
numOFDMSymbols = ceil(length(qamModulatedSymbols) / numSubcarriers);  % 计算 OFDM 符号数
% 数据循环填充
repeatedSymbols = repmat(qamModulatedSymbols, ceil(numOFDMSymbols * numSubcarriers / length(qamModulatedSymbols)), 1);
qamModulatedSymbols = repeatedSymbols(1:(numOFDMSymbols * numSubcarriers)); % 截取填满所需长度
qamModulatedSymbols = reshape(qamModulatedSymbols, numSubcarriers, []);  % 重塑为子载波 x 符号数的矩阵

% OFDM 调制
ofdmModulatedSignal = ofdmmod(qamModulatedSymbols, fftLength, fftLength*0.5);

% bbrx = basebandReceiver("My USRP X310");
% 
% interpolator = 4;
% masterclockrate = 122.88e6;
% samplerate = masterclockrate/interpolator;
% bbrx.SampleRate = samplerate;
% bbrx.CenterFrequency = 2.37e9;
% bbrx.RadioGain = 20;
% bbrx.DroppedSamplesAction = "warning";
% bbrx.CaptureDataType = 'double';
disp('-----start Capturing!-----')

% 初始化频谱分析仪
spectrumAnalyze = spectrumAnalyzer( ...
    'Name',             'Signal Spectrum', ...
    'Title',            'Received Signal DLBS', ...
    'SpectrumType',     'Power', ...
    'FrequencySpan',    'Full', ...
    'SampleRate',       30000 * 1024, ...
    'ShowLegend',       true, ...
    'ViewType',         'spectrum-and-spectrogram', ...
    'Position',         [100 100 800 500], ...
    'ChannelNames',     {'Received'});

% 初始化时间域图
timesink = timescope( ...
    'Name',             'Time Scope', ...
    'Title',            'Received Signal DLSB1', ...
    'ChannelNames',     {'input time-domain data'}, ...
    'ShowLegend',       true, ...
    'SampleRate',       30000 * 1024, ...
    'YLimits',          [-0.4, 0.4], ...
    'LayoutDimensions', [1, 1], ...
    'ActiveDisplay',    1);
start = tic;
for i = 1:100
    % under = tx(ofdmModulatedSignal);
    % [rxWaveform, ~, overflow] = radio();
    [data,metadata] = capture(radio,0.1,'Seconds');
    % pause(0.1)
    % if overflow
    %     disp('1')
    % end
    % if under
    %     disp('00')
    % end
    % [data,timestamps,overflows] = capture(bbrx,38400);
    spectrumAnalyze(data);
    timesink(data)
end
endtime = toc(start);
disp('-----Capturing complete!-----')
release(radio)